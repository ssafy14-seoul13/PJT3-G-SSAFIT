# PJT3-G-SSAFIT
팀장: 상현

팀원: 가은

## SSAFIT 데이터 자료구조 기획


## [1] 개요 

SSAFIT 웹 애플리케이션의 핵심 기능을 구현하기 위한 데이터 관리 방안 

## [2] 자료구조 상세 기획

---

### 2-1. 회원 데이터 (Users) 👨‍🦱

자료구조: Object

#### ✅ 활용 목적

 아이디의 중복을 빠르게 확인하고, 로그인 시 특정 사용자의 정보를 신속하게 조회하기 위함 아이디를 객체의 키(Key)로 사용하면 배열을 순회하는 것보다 효율적입니다.

#### ✅ 저장 위치

localStorage (브라우저를 닫아도 데이터가 유지됨)

#### ✅ 세부 구조

        JavaScript
        
        {
        "userId_1": {
            "userId": "userId_1",
            "name": "사용자 이름",
            "email": "email@example.com",
            "password": "hashed_password",
            "joinDate": "2025-09-19T..."
        },
        "userId_2": { ... }
        }

---

### 2-2 동영상 데이터 (Videos) 📹

자료구조: Array

#### ✅ 활용 목적

 영상 목록을 순서대로 보여주거나, 운동 부위별로 필터링하는 데 가장 적합합니다. Array.prototype.filter(), Array.prototype.find() 등의 내장 메서드를 쉽게 활용할 수 있습니다.

#### ✅ 저장 위치
 video.json 파일

#### ✅ 세부 구조

        JSON

        [
        {
            "id": "videoId_1",
            "title": "영상 제목",
            "part": "운동 부위",
            "channelName": "채널 이름",
            "url": "유튜브 embed URL"
        },
        { ... }
        ]

---


### 2-3. 리뷰 데이터 (Reviews) 💬

#### ✅ 자료구조

Object 내부에 Array (동영상별로 분리)

#### ✅ 활용 목적

특정 동영상 페이지에 접속했을 때 해당 영상의 리뷰만 효율적으로 불러오기 위함입니다. 동영상 ID를 키(Key)로 사용하여 필요한 데이터에만 빠르게 접근할 수 있습니다.

#### ✅ 저장 위치

localStorage (각 동영상별로 다른 키 사용)

#### ✅ 세부 구조

키(Key): reviews_ + videoId

값(Value): 해당 동영상에 대한 리뷰 객체들의 배열

    JavaScript

    // 'localStorage'에 저장될 예시
    {
    "reviews_gMaB-fG4u4g": [
        {
        "id": 1,
        "author": "리뷰 작성자",
        "content": "리뷰 내용",
        "date": "2025.09.19",
        "likes": 5,
        "isMine": true
        },
        { ... }
    ],
    "reviews_swRNeYw1JkY": [ ... ]
    }

---
## SSAFIT 알고리즘 활용 기획

### [1] 개요

SSAFIT 웹 애플리케이션의 핵심 기능을 구현하기 위한 알고리즘 활용 방안

### [2] 알고리즘 활용 상세 기획

2-1. 관련 영상 추천 기능

#### ✅ 활용 알고리즘

최단 경로 알고리즘 (다익스트라)

#### ✅ 세부 구조

영상 간 유사도를 거리로 변환 (1 - 유사도)

다익스트라로 현재 영상에서 가장 "가까운" 영상들 찾기

    영상A -(0.2)→ 영상B -(0.3)→ 영상C
    ↓(0.4)           ↗(0.1)
    영상D -(0.2)→ 영상E

영상 간 유사도를 간선 가중치로 설정

현재 시청 중인 영상에서 가장 유사한 영상 순서로 추천

#### 📱 사용자 시나리오

기본 시나리오: 사용자가 "10분 복근 운동" 영상을 시청 완료

알고리즘 작동: 시스템이 해당 영상과 연결된 그래프에서 다익스트라 실행

결과 제공: "15분 복근 강화", "코어 스트레칭", "하체+복근 운동" 순서로 추천

사용자 행동: 추천 영상 중 하나를 선택해 연속 운동 진행

#### ✨ 이점

정확한 유사도 계산: 단순 태그 매칭보다 영상 간의 실제 관련성을 더 정확히 파악

다단계 연관성 발견: 직접 연결되지 않은 영상들도 경로를 통해 추천 가능

개인화 가능: 사용자의 시청 패턴을 학습하여 가중치 조정

확장성: 새로운 영상 추가 시 기존 네트워크에 자연스럽게 통합

#### ⚠️ 이슈사항

초기 데이터 부족: 신규 영상의 경우 연결 정보가 부족해 추천 어려움

계산 복잡도: 영상 수가 많아질수록 O(V²) 시간 복잡도로 성능 저하 우려

유사도 정의: 어떤 기준으로 영상 간 유사도를 측정할지에 대한 명확한 정의 필요

실시간 업데이트: 사용자 반응에 따른 가중치 실시간 조정의 복잡성

#### 🔧 해결방안

콜드 스타트 문제: 메타데이터 기반 초기 연결 + 점진적 학습

성능 최적화: 우선순위 큐 + 조기 종료 조건 설정

유사도 지표: 장르, 난이도, 시간, 사용자 행동 패턴 등을 종합한 복합 지표 사용

---


### 2-2. 운동 루틴 추천 시스템

#### ✅ 활용 알고리즘 1: 위상 정렬 (Topological Sort)

#### ✅ 세부 구조

    스트레칭 → 워밍업 → 본운동 → 쿨다운
        ↓         ↓        ↓        ↓
    영상1    영상2-5   영상6-10  영상11

운동 순서의 선후관계를 DAG로 모델링

사용자에게 올바른 운동 순서 추천

#### 📱 사용자 시나리오

루틴 요청: 사용자가 "30분 전신 운동 루틴" 요청

DAG 구성: 시스템이 전신 운동에 적합한 운동들을 선후관계에 따라 배열

위상 정렬: 올바른 운동 순서 계산 (스트레칭 → 워밍업 → 상체 → 하체 → 쿨다운)

루틴 제공: 각 단계별 적합한 영상들을 순서대로 제공

진행 관리: 사용자가 순서대로 진행하며 완주 시 성취감 제공

#### ✨ 이점

과학적 운동 순서: 운동 생리학에 기반한 안전하고 효과적인 운동 순서 보장

부상 예방: 준비운동 없이 본운동을 하는 등의 위험한 순서 방지

체계적 프로그램: 초보자도 전문가가 설계한 것 같은 체계적인 운동 가능

유연성: 사용자 시간에 맞춰 단계 조정 가능

#### ⚠️ 이슈사항

순환 종속성: 잘못된 운동 관계 정의 시 DAG 구성 실패

개인차 무시: 개인의 체력 수준이나 특별한 제약사항 고려 부족

단조로움: 항상 같은 순서로만 운동하게 되어 지루함 발생 가능


#### ✅ 활용 알고리즘 2: 벨만-포드 알고리즘

#### ✅ 세부 구조

운동 효과를 음의 가중치로 설정

목표 달성까지 "최대 효과" 경로 찾기

    현재 상태 -(다이어트 효과: -5)→ 유산소 -(근력 효과: -3)→ 근력운동 → 목표 상태
        ↓(스트레칭 효과: -2)                    ↗(-4)
        스트레칭 -(유연성 효과: -3)→ 요가

#### 📱 사용자 시나리오

목표 설정: 사용자가 "3개월 내 5kg 감량" 목표 입력

현재 상태 분석: BMI, 체력 수준, 운동 경험 등을 바탕으로 시작점 설정

경로 계산: 벨만-포드로 현재 상태에서 목표까지 최대 효과 경로 계산

루틴 생성: 고강도 유산소 → 근력운동 → 식단 관리 순으로 최적 루틴 제공

진행 모니터링: 주기적으로 상태를 업데이트하여 경로 재계산

#### ✨ 이점

목표 지향적: 사용자의 구체적인 목표에 최적화된 운동 계획 제공

효율성 극대화: 제한된 시간 내에서 목표 달성 확률을 최대화

음의 사이클 탐지: 잘못된 운동 조합(부작용)을 사전에 감지 가능

개인 맞춤화: 개인의 목표와 현재 상태에 완벽하게 맞춤

#### ⚠️ 이슈사항

복잡한 효과 모델링: 운동 효과를 정확한 수치로 표현하기 어려움

개인차 변수: 같은 운동이라도 개인에 따라 효과가 크게 다름

장기간 변화: 운동 효과는 즉시 나타나지 않아 실시간 피드백 어려움

음의 가중치 설정: 운동 효과를 음수로 변환하는 과정에서 직관성 저하

#### 🔧 해결방안

머신러닝 결합: 사용자 데이터 축적을 통한 개인별 효과 계수 학습

주기적 재평가: 2-4주마다 목표와 현재 상태 재설정

다중 목표 지원: 체중 감량 + 근력 향상 등 복합 목표에 대한 가중치 조합

---

## 소감

1. 알고리즘 활용의 필요성

 수업 시간 중 배웠던 알고리즘이 단순히 코딩테스트를 위함이 아니라, 프로젝트 기능 구현에도 다양하게 쓰일 수 있다는 것을 체감했다. 특히 데이터를 활용하면 기능의 활용도가 높아지기 때문에 알고리즘에서 더 나아가서 데이터분석 기법에 대해서도 알아두면 좋겠다는 생각을 했다.

2. Web 프로젝트 중 JS 의 중요성

 사실 수업 중 JavaScript에 대해 배울 때 다른 언어만큼 주요하게 듣지는 않았던 것 같다. 하지만 이번 관통 프로젝트에서 알고리즘과 HTML/CSS를 원하는 기능으로 간편하게 추가할 수 있어 그 활용성과 중요성을 느꼈다. 앞으로 있을 Web 프로젝트를 위해 JS 활용 역량을 길러야겠다고 생각했다.
